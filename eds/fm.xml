<?xml version="1.0" encoding="UTF-8"?>
<!--

    GSC-18128-1, "Core Flight Executive Version 6.7"
    LEW-19710-1, "CCSDS electronic data sheet implementation"

    Copyright (c) 2006-2019 United States Government as represented by
    the Administrator of the National Aeronautics and Space Administration.
    All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    This document adheres to the Electronic Data Sheet (EDS) XML schema
    as prescribed in CCSDS book 876.0.

    Purpose:
      This describes all interface objects for the Executive Services (CFE_ES)
      core application

-->
<PackageFile xmlns="http://www.ccsds.org/schema/sois/seds">
  <Package name="FM" shortDescription="File Manager">

      <DataTypeSet>

        <EnumeratedDataType name="MonitorTableEntry_Type" ShortDescription="Identifies the entry type in a filesystem monitor report">
            <EnumerationList>
              <Enumeration label="UNUSED" value="0" shortDescription="Table entry is not used, these entries are ignored" />
              <Enumeration label="VOLUME_FREE_SPACE" value="1">
                <LongDescription>
                  Monitor the free space on given volume

                  The given path will be passed to OS_FileSysStatVolume() and the results
                  will be reported in the generated TLM entry.
                </LongDescription>
              </Enumeration>
              <Enumeration label="DIRECTORY_ESTIMATE" value="2">
                <LongDescription>
                  Estimate the sum of space used by files within specified directory

                  The given path will be opened as a directory.  The size of each regular
                  file present in that directory will be summed to produce an estimate of the
                  total space associated with that directory.

                  Note that this yields only an estimate, as there can be discrepancies
                  between the file size as observed by this method and the actual disk blocks
                  used by a given file.
                </LongDescription>
              </Enumeration>
            </EnumerationList>
            <IntegerDataEncoding sizeInBits="8" encoding="unsigned" />
        </EnumeratedDataType>

        <EnumeratedDataType name="TABLE_ENTRY" ShortDescription="FM free space table entry state definitions">
            <EnumerationList>
              <Enumeration label="DISABLED" value="0"  />
              <Enumeration label="ENABLED" value="1"  />
            </EnumerationList>
            <IntegerDataEncoding sizeInBits="32" encoding="unsigned" />
        </EnumeratedDataType>

        <BooleanDataType name="MonitorTableEntry_Enable" ShortDescription="FM filesystem monitor table entry enable flag">
          <IntegerDataEncoding sizeInBits="8" encoding="unsigned" />
        </BooleanDataType>

        <ContainerDataType name="OvwSourceTargetFilename_Payload" >
          <EntryList>
            <Entry name="Overwrite" type="BASE_TYPES/uint16" shortDescription="Allow overwrite" />
            <Entry name="Source" type="BASE_TYPES/PathName" shortDescription="Source filename" />
            <Entry name="Target" type="BASE_TYPES/PathName" shortDescription="Target filename" />
          </EntryList>
        </ContainerDataType>

      <ContainerDataType name="SourceTargetFileName_Payload" >
        <EntryList>
          <Entry name="Source" type="BASE_TYPES/PathName" shortDescription="Source filename" />
          <Entry name="Target" type="BASE_TYPES/PathName" shortDescription="Target filename" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="SingleFilename_Payload" >
        <EntryList>
          <Entry name="Filename" type="BASE_TYPES/PathName"  shortDescription="Delete filename" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="TwoSourceOneTarget_Payload" >
        <EntryList>
          <Entry name="Source1" type="BASE_TYPES/PathName" shortDescription="Source 1 filename" />
          <Entry name="Source2" type="BASE_TYPES/PathName" shortDescription="Source 2 filename" />
          <Entry name="Target" type="BASE_TYPES/PathName" shortDescription="Target filename" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="FilenameAndCRC_Payload" >
        <EntryList>
          <Entry name="Filename" type="BASE_TYPES/PathName"  shortDescription="Filename" />
          <Entry name="FileInfoCRC" type="BASE_TYPES/uint32"   shortDescription="File info CRC method" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DirectoryName_Payload" >
        <EntryList>
          <Entry name="Directory" type="BASE_TYPES/PathName" shortDescription="Directory name" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetDirectoryToFile_Payload" >
        <EntryList>
          <Entry name="Directory" type="BASE_TYPES/PathName" shortDescription="Directory name" />
          <Entry name="Filename" type="BASE_TYPES/PathName"  shortDescription="Filename" />
          <Entry name="GetSizeTimeMode" type="BASE_TYPES/uint8" shortDescription="Option to query size, time, and mode of files (CPU intensive)" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetDirectoryToPkt_Payload" >
        <EntryList>
          <Entry name="Directory" type="BASE_TYPES/PathName" shortDescription="Directory name" />
          <Entry name="DirListOffset" type="BASE_TYPES/uint32" shortDescription="Index of 1st dir entry to put in packet" />
          <Entry name="GetSizeTimeMode" type="BASE_TYPES/uint8" shortDescription="Option to query size, time, and mode of files (CPU intensive)" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="TableIndexAndState_Payload" >
        <EntryList>
          <Entry name="TableEntryIndex" type="BASE_TYPES/uint32" shortDescription="Table entry index" />
          <Entry name="TableEntryState" type="BASE_TYPES/uint32" shortDescription="New table entry state" />
        </EntryList>
      </ContainerDataType>


      <ContainerDataType name="FilenameAndMode_Payload" >
        <EntryList>
          <Entry name="FileName" type="BASE_TYPES/PathName"  shortDescription="File name of the permissions to set" />
          <Entry name="Mode" type="BASE_TYPES/uint32" shortDescription="Permissions, passed directly to OS_chmod" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="MonitorReportEntry" shortDescription="Monitor filesystem list entry structure">
        <EntryList>
          <Entry name="ReportType" type="MonitorTableEntry_Type" shortDescription="Type of entry" />
          <Entry name="Name" type="BASE_TYPES/PathName"  shortDescription="File system name" />
          <Entry name="Blocks" type="BASE_TYPES/uint64" shortDescription="Block count from last check/poll, 0 if unknown" />
          <Entry name="Bytes" type="BASE_TYPES/uint64" shortDescription="Byte count from last check/poll, 0 if unknown" />
        </EntryList>
      </ContainerDataType>

      <ArrayDataType name="MonitorReportPktFileSys" dataTypeRef="MonitorReportEntry">
        <DimensionList>
           <Dimension size="${FM/TABLE_ENTRY_COUNT}"/>
        </DimensionList>
      </ArrayDataType>

      <ContainerDataType name="MonitorReportPkt_Payload" shortDescription="Monitor filesystem telemetry payload">
        <EntryList>
          <Entry name="FileSys" type="MonitorReportPktFileSys" shortDescription="Array of file system monitor entries" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="MonitorReportPkt" baseType="CFE_HDR/TelemetryHeader" shortDescription="Monitor filesystem telemetry">
        <EntryList>
          <Entry type="MonitorReportPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DirListEntry" shortDescription="DirListEntry">
        <EntryList>
          <Entry name="EntryName" type="BASE_TYPES/PathName" shortDescription="Directory Listing Filename" />
          <Entry name="EntrySize" type="BASE_TYPES/uint32" shortDescription="Directory Listing File Size" />
          <Entry name="ModifyTime" type="BASE_TYPES/uint32" shortDescription="Directory Listing File Last Modification Times" />
          <Entry name="Mode" type="BASE_TYPES/uint32" shortDescription="Mode of the file (Permissions)" />
        </EntryList>
      </ContainerDataType>

      <ArrayDataType name="FileList" dataTypeRef="DirListEntry">
        <DimensionList>
           <Dimension size="${FM/DIR_LIST_PKT_ENTRIES}"/>
        </DimensionList>
      </ArrayDataType>

      <ContainerDataType name="DirListPkt_Payload" shortDescription="Get Directory Listing telemetry packet">
        <EntryList>
          <Entry name="DirName" type="BASE_TYPES/PathName" shortDescription="File system name" />
          <Entry name="TotalFiles" type="BASE_TYPES/uint32" shortDescription="Number of files in the directory" />
          <Entry name="PacketFiles" type="BASE_TYPES/uint32" shortDescription="Number of files in this packet" />
          <Entry name="FirstFile" type="BASE_TYPES/uint32" shortDescription="Index into directory files of first packet file" />
          <Entry name="FileList" type="FileList" shortDescription="Directory listing file data" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DirListPkt" baseType="CFE_HDR/TelemetryHeader">
        <EntryList>
          <Entry type="DirListPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="FileInfoPkt_Payload" shortDescription="FileInfo telemetry packet">
        <EntryList>
          <Entry name="FileStatus" type="BASE_TYPES/uint8" shortDescription="Status indicating whether the file is open or closed" />
          <Entry name="CRC_Computed" type="BASE_TYPES/uint8" shortDescription="Flag indicating whether a CRC was computed or not" />
          <Entry name="CRC" type="BASE_TYPES/uint32" shortDescription="CRC value if computed" />
          <Entry name="FileSize" type="BASE_TYPES/uint32" shortDescription="File Size" />
          <Entry name="LastModifiedTime" type="BASE_TYPES/uint32" shortDescription="Last Modification Time of File" />
          <Entry name="Mode" type="BASE_TYPES/uint32" shortDescription="Mode of the file (Permissions)" />
          <Entry name="Filename" type="BASE_TYPES/PathName" shortDescription="File name" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="FileInfoPkt" baseType="CFE_HDR/TelemetryHeader">
        <EntryList>
          <Entry type="FileInfoPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="OpenFilesEntry" shortDescription="OpenFilesEntry">
        <EntryList>
          <Entry name="LogicalName" type="BASE_TYPES/PathName" shortDescription="Logical filename" />
          <Entry name="AppName" type="BASE_TYPES/ApiName" shortDescription="Application that opened file" />
        </EntryList>
      </ContainerDataType>

      <ArrayDataType name="OpenFilesList" dataTypeRef="OpenFilesEntry">
        <DimensionList>
           <Dimension size="${CFE_MISSION/OS_MAX_NUM_OPEN_FILES}"/>
        </DimensionList>
      </ArrayDataType>

      <ContainerDataType name="OpenFilesPkt_Payload" shortDescription="Open files telemetry packet">
        <EntryList>
          <Entry name="NumOpenFiles" type="BASE_TYPES/uint32" shortDescription="Number of files opened via cFE" />
          <Entry name="OpenFilesList" type="OpenFilesList" shortDescription="Directory listing file data" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="OpenFilesPkt" baseType="CFE_HDR/TelemetryHeader">
        <EntryList>
          <Entry type="OpenFilesPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="HousekeepingPkt_Payload" shortDescription="FM housekeeping">
        <EntryList>
          <Entry name="CommandCounter" type="BASE_TYPES/uint8" shortDescription="Application command counter" />
          <Entry name="CommandErrCounter" type="BASE_TYPES/uint8" shortDescription="Application command error counter" />
          <Entry name="NumOpenFiles" type="BASE_TYPES/uint8" shortDescription="Number of open files in the system" />
          <Entry name="ChildCmdCounter" type="BASE_TYPES/uint8" shortDescription="Child task command counter" />
          <Entry name="ChildCmdErrCounter" type="BASE_TYPES/uint8" shortDescription="Child task command error counter" />
          <Entry name="ChildCmdWarnCounter" type="BASE_TYPES/uint8" shortDescription="Child task command warning counter" />
          <Entry name="ChildQueueCount" type="BASE_TYPES/uint8" shortDescription="Number of pending commands in queue" />
          <Entry name="ChildCurrentCC" type="BASE_TYPES/uint8" shortDescription="Command code currently executing" />
          <Entry name="ChildPreviousCC" type="BASE_TYPES/uint8" shortDescription="Command code previously executed" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="HousekeepingPkt" baseType="CFE_HDR/TelemetryHeader">
        <EntryList>
          <Entry type="HousekeepingPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="CMD" baseType="CFE_HDR/CommandHeader">
      </ContainerDataType>

      <ContainerDataType name="NoopCmd" baseType="CMD">
        <LongDescription>
         \fmcmd No Operation

          \par Description
               This command performs no operation other than to generate an
               informational event that also contains software version data.
               The command is most often used as a general aliveness test by
               demonstrating that the application can receive commands and
               generate telemetry.

          \fmcmdmnemonic \FM_Noop

          \par Command Packet Structure
               #FM_NoopCmd_t

          \par Command Success Verification
               - Informational event #FM_NOOP_CMD_EID will be sent
               - Command success counter /FM_CMDPC will increment

          \par Command Error Conditions
               - Invalid command packet length

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_NOOP_PKT_ERR_EID will be sent

          \par Criticality
               - There are no critical issues related to this command.

            </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="0" />
        </ConstraintSet>
      </ContainerDataType>

      <ContainerDataType name="ResetCountersCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Reset Counters

          \par Description
               This command resets the following housekeeping telemetry:
               - Command success counter /FM_CMDPC
               - Command error counter /FM_CMDEC
               - Command warning counter /FM_WarnCtr
               - Child cmd success counter /FM_ChildCMDPC
               - Child cmd error counter /FM_ChildCMDEC
               - Child cmd warning counter /FM_ChildWarnCtr

          \fmcmdmnemonic \FM_ResetCtrs

          \par Command Packet Structure
               #FM_ResetCmd_t

          \par Command Success Verification
               - Command counters will be set to zero (see description)
               - Debug event #FM_RESET_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_RESET_PKT_ERR_EID will be sent

          \par Criticality
               - There are no critical issues related to this command.


        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="1" />
        </ConstraintSet>
      </ContainerDataType>

      <ContainerDataType name="CopyFileCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Copy File

          \par Description
               This command copies the source file to the target file.
               The source must be an existing file and the target must not be a
               directory name.
               If the Overwrite command argument is TRUE, then the target may be
               an existing file, provided that the file is closed.
               If the Overwrite command argument is FALSE, then the target must not exist.
               The source and target may be on different file systems.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               copying the file will be performed by a lower priority child task.
               As such, the command result for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_Copy

          \par Command Packet Structure
               #FM_CopyFileCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - Debug event #FM_COPY_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Overwrite is not TRUE (one) or FALSE (zero)
               - Source filename is invalid
               - Source file does not exist
               - Source filename is a directory
               - Target filename is invalid
               - Target file already exists
               - Target filename is a directory
               - Child task interface queue is full
               - Child task interface logic is broken
               - Failure of OS copy function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_COPY_PKT_ERR_EID may be sent
               - Error event #FM_COPY_OVR_ERR_EID may be sent
               - Error event #FM_COPY_SRC_ERR_EID may be sent
               - Error event #FM_COPY_TGT_ERR_EID may be sent
               - Error event #FM_COPY_CHILD_ERR_EID may be sent
               - Error event #FM_COPY_OS_ERR_EID may be sent

          \par Criticality
               Copying files may consume file space needed by other
               critical tasks.  Also, copying very large files may
               consume more CPU resource than anticipated.

          \sa #FM_MOVE_CC, #FM_RENAME_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="2" />
        </ConstraintSet>
        <EntryList>
          <Entry type="OvwSourceTargetFilename_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="MoveFileCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Move File

          \par Description
               This command moves the source file to the target file.
               The source must be an existing file and the target must not be a
               directory name.
               If the Overwrite command argument is TRUE, then the target may be
               an existing file, provided that the file is closed.
               If the Overwrite command argument is FALSE, then the target must not exist.
               Source and target must both be on the same file system.
               The move command does not actually move any file data.
               The command modifies the file system directory structure to
               create a different file entry for the same file data.
               If the user wishes to move a file across file systems, he
               must first copy the file and then delete the original.

          \fmcmdmnemonic \FM_Move

          \par Command Packet Structure
               #FM_MoveFileCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment
               - Debug event #FM_MOVE_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Overwrite is not TRUE (one) or FALSE (zero)
               - Source filename is invalid
               - Source file does not exist
               - Source filename is a directory
               - Target filename is invalid
               - Target file already exists
               - Target filename is a directory
               - Failure of OS move function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_MOVE_PKT_ERR_EID may be sent
               - Error event #FM_MOVE_OVR_ERR_EID may be sent
               - Error event #FM_MOVE_SRC_ERR_EID may be sent
               - Error event #FM_MOVE_TGT_ERR_EID may be sent
               - Error event #FM_MOVE_OS_ERR_EID may be sent

          \par Criticality
               - There are no critical issues related to this command.

          \sa #FM_COPY_CC, #FM_RENAME_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="3" />
        </ConstraintSet>
        <EntryList>
          <Entry type="OvwSourceTargetFilename_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="RenameFileCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Rename File

          \par Description
               This command renames the source file to the target file.
               Source must be an existing file and target must not exist.
               Source and target must both be on the same file system.
               The rename command does not actually move any file data.
               The command modifies the file system directory structure to
               create a different file entry for the same file data.
               If the user wishes to rename a file across file systems, he
               must first copy the file and then delete the original.

          \fmcmdmnemonic \FM_Rename

          \par Command Packet Structure
               #FM_RenameFileCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment
               - Debug event #FM_RENAME_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Source filename is invalid
               - Source file does not exist
               - Source filename is a directory
               - Target filename is invalid
               - Target file already exists
               - Target filename is a directory
               - Failure of OS rename function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_RENAME_PKT_ERR_EID may be sent
               - Error event #FM_RENAME_SRC_ERR_EID may be sent
               - Error event #FM_RENAME_TGT_ERR_EID may be sent
               - Error event #FM_RENAME_OS_ERR_EID may be sent

          \par Criticality
               - There are no critical issues related to this command.

          \sa #FM_COPY_CC, #FM_MOVE_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="4" />
        </ConstraintSet>
        <EntryList>
          <Entry type="SourceTargetFileName_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DeleteFileCmd" baseType="CMD">
        <LongDescription>
 \fmcmd Delete File

  \par Description
       This command deletes the source file.
       Source must be an existing file that is not open.

  \fmcmdmnemonic \FM_Delete

  \par Command Packet Structure
       #FM_DeleteFileCmd_t

  \par Command Success Verification
       - Command success counter /FM_CMDPC will increment
       - Debug event #FM_DELETE_CMD_EID will be sent

  \par Command Error Conditions
       - Invalid command packet length
       - Filename is invalid
       - File does not exist
       - File is open
       - Filename is a directory
       - Failure of OS delete function

  \par Command Failure Verification
       - Command error counter /FM_CMDEC will increment
       - Error event #FM_DELETE_PKT_ERR_EID may be sent
       - Error event #FM_DELETE_SRC_ERR_EID may be sent
       - Error event #FM_DELETE_OS_ERR_EID may be sent

  \par Criticality
       The FM application does not provide a method to restore deleted
       files.  Critical data may be lost when deleting files.

  \sa #FM_DELETE_ALL_CC, #FM_DELETE_DIR_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="5" />
        </ConstraintSet>
        <EntryList>
          <Entry type="SingleFilename_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DeleteAllFilesCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Delete All Files

          \par Description
               This command deletes all files in the source directory.
               Source must be an existing directory.
               Open files and sub-directories are not deleted.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               reading the directory and deleting each file will be performed by a
               lower priority child task.
               As such, the return value for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_DeleteAll

          \par Command Packet Structure
               #FM_DeleteAllCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - Debug event #FM_DELETE_ALL_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid directory name
               - Directory does not exist
               - Directory name + separator + filename is too long
               - Failure of OS delete function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_DELETE_ALL_PKT_ERR_EID may be sent
               - Error event #FM_DELETE_ALL_SRC_ERR_EID may be sent
               - Error event #FM_DELETE_ALL_CHILD_ERR_EID may be sent
               - Error event #FM_DELETE_ALL_OS_ERR_EID may be sent

          \par Command Warning Conditions
               - Directory entry is not a file (sub-directory)
               - Directory entry is an open file

          \par Command Warning Verification
               - Warning counter /FM_WarnCtr will increment
               - Informational event #FM_DELETE_ALL_WARNING_EID will be sent

          \par Criticality
               The FM application does not provide a method to restore deleted
               files.  Critical data may be lost when deleting files.  Also,
               deleting a very large number of files may consume more CPU resource
               than anticipated.

          \sa #FM_DELETE_CC, #FM_DELETE_DIR_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="7" />
        </ConstraintSet>
        <EntryList>
          <Entry type="DirectoryName_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DecompressFileCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Decompress File

          \par Description
               This command invokes a CFE function to decompress the source
               file into the target file.
               Source must be an existing file and target must not exist.
               Source and target may be on different file systems.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               decompressing the source file into the target file will be performed by
               a lower priority child task.
               As such, the return value for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_Decompress

          \par Command Packet Structure
               #FM_DecompressCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - Debug event #FM_DECOM_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid source filename
               - Source file does not exist
               - Invalid target filename
               - Target file does exist
               - Failure of CFE_FS_Decompress function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_DECOM_PKT_ERR_EID may be sent
               - Error event #FM_DECOM_SRC_ERR_EID may be sent
               - Error event #FM_DECOM_TGT_ERR_EID may be sent
               - Error event #FM_DECOM_CFE_ERR_EID may be sent

          \par Criticality
               Decompressing a very large file may consume more CPU resource than
               anticipated.

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="8" />
        </ConstraintSet>
        <EntryList>
          <Entry type="SourceTargetFileName_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="ConcatFilesCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Concatenate Files

          \par Description
               This command concatenates two source files into the target
               file.
               Sources must both be existing files and target must not exist.
               Sources and target may be on different file systems.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               copying the first source file to the target file and then appending the
               second source file to the target file will be performed by a lower priority
               child task.
               As such, the return value for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_Concat

          \par Command Packet Structure
               #FM_ConcatCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - Debug event #FM_CONCAT_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid source filename
               - Source file does not exist
               - Invalid target filename
               - Target file does exist
               - Failure of OS function (copy, open, read, write, etc.)

          \par Command Failure Verification
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_CONCAT_PKT_ERR_EID may be sent
               - Error event #FM_CONCAT_SRC1_ERR_EID may be sent
               - Error event #FM_CONCAT_SRC2_ERR_EID may be sent
               - Error event #FM_CONCAT_TGT_ERR_EID may be sent
               - Error event #FM_CONCAT_OS_ERR_EID may be sent

          \par Criticality
               Concatenating very large files may consume more CPU resource
               than anticipated.

          \sa #FM_COPY_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="9" />
        </ConstraintSet>
        <EntryList>
          <Entry type="TwoSourceOneTarget_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetFileInfoCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Get File Information

          \par Description
               This command creates an FM file information telemetry packet
               for the source file.
               The file information packet includes status that indicates
               whether source is a file that is open or closed, a directory,
               or does not exist.
               The file information data also includes a CRC, file size,
               last modify time and the source name.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               collecting the status data and calculating the CRC will be performed by
               a lower priority child task.
               As such, the return value for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_GetFileInfo

          \par Command Packet Structure
               #FM_GetFileInfoCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - Debug event #FM_GET_FILE_INFO_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid source filename
               - Failure of OS_stat function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_GET_FILE_INFO_PKT_ERR_EID may be sent
               - Error event #FM_GET_FILE_INFO_SRC_ERR_EID may be sent
               - Error event #FM_GET_FILE_INFO_CHILD_ERR_EID may be sent

          \par Criticality
               Calculating the CRC for a very large file may consume more CPU resource than
               anticipated.

          \sa #FM_GET_OPEN_FILES_CC, #FM_GET_DIR_FILE_CC, #FM_GET_DIR_PKT_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="10" />
        </ConstraintSet>
        <EntryList>
          <Entry type="FilenameAndCRC_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetOpenFilesCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Get Open Files Listing

          \par Description
               This command creates an FM open files telemetry packet.
               The open files packet includes the number of open files and
               for each open file, the name of the file and the name of the
               application that has the file opened.

          \fmcmdmnemonic \FM_GetOpenFiles

          \par Command Packet Structure
               #FM_GetOpenFilesCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment
               - Debug event #FM_GET_OPEN_FILES_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_GET_OPEN_FILES_PKT_ERR_EID will be sent

          \par Criticality
               - There are no critical issues related to this command.

          \sa #FM_GET_FILE_INFO_CC, #FM_GET_DIR_FILE_CC, #FM_GET_DIR_PKT_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="11" />
        </ConstraintSet>
      </ContainerDataType>

      <ContainerDataType name="CreateDirectoryCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Create Directory

          \par Description
               This command creates the source directory.
               Source must be a valid directory name that does not exist.

          \fmcmdmnemonic \FM_CreateDir

          \par Command Packet Structure
               #FM_CreateDirCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment
               - Debug event #FM_CREATE_DIR_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid directory name
               - Directory name already exists
               - Failure of OS_mkdir function

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_CREATE_DIR_PKT_ERR_EID may be sent
               - Error event #FM_CREATE_DIR_SRC_ERR_EID may be sent
               - Error event #FM_CREATE_DIR_OS_ERR_EID may be sent

          \par Criticality
               - There are no critical issues related to this command.

          \sa #FM_DELETE_DIR_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="12" />
        </ConstraintSet>
        <EntryList>
          <Entry type="DirectoryName_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DeleteDirectoryCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Remove Directory

          \par Description
               This command deletes the source directory, it does
               not delete the contents of the directory.
               Source must be a valid directory name that exists.

          \fmcmdmnemonic \FM_DeleteDir

          \par Command Packet Structure
               #FM_DeleteDirCmd_t

          \par Command Success Verification
               - Command success counter /FM_CMDPC will increment
               - Debug event #FM_DELETE_DIR_CMD_EID will be sent

          \par Command Error Conditions
               - Invalid command packet length
               - Invalid directory name
               - Directory does not exist
               - Directory is not empty
               - Failure of OS function (OS_opendir, OS_rmdir)

          \par Command Failure Verification
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_DELETE_DIR_PKT_ERR_EID may be sent
               - Error event #FM_DELETE_DIR_SRC_ERR_EID may be sent
               - Error event #FM_DELETE_DIR_EMPTY_ERR_EID may be sent
               - Error event #FM_DELETE_DIR_OS_ERR_EID may be sent

          \par Criticality
               The unexpected loss of a directory may affect a critical
               tasks ability to store data.

          \sa #FM_CREATE_DIR_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="13" />
        </ConstraintSet>
        <EntryList>
          <Entry type="DirectoryName_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetDirListFileCmd" baseType="CMD">
        <LongDescription>
     \fmcmd Get Directory Listing to a File

      \par Description
           This command writes a listing of the contents of the source
           directory to the target file.
           If the target filename buffer is empty, then the default
           target filename #FM_PLATFORM_DIR_LIST_FILE_DEFNAME is used.
           The command will overwrite a previous copy of the target
           file, if one exists.
           Because of the possibility that this command might take a very long time
           to complete, command argument validation will be done immediately but
           reading the directory will be performed by a lower priority child task.
           As such, the return value for this function only refers to the result
           of command argument verification and being able to place the command on
           the child task interface queue.

      \fmcmdmnemonic \FM_GetDirFile

      \par Command Packet Structure
           #FM_GetDirFileCmd_t

      \par Command Success Verification
           - Command success counter /FM_CMDPC will increment after validation
           - Child cmd success counter /FM_ChildCMDPC will increment after completion
           - Debug event #FM_GET_DIR_FILE_CMD_EID will be sent

      \par Command Error Conditions
           - Invalid command packet length
           - Invalid source directory name
           - Source directory does not exist
           - Directory name + separator is too long
           - Directory name + directory entry is too long
           - Invalid target filename
           - Target file is already open
           - Failure of OS function (OS_opendir, OS_creat, OS_write)

      \par Command Failure Verification
           - Command error counter /FM_CMDEC may increment
           - Child cmd error counter /FM_ChildCMDEC may increment
           - Error event #FM_GET_DIR_FILE_PKT_ERR_EID may be sent
           - Error event #FM_GET_DIR_FILE_SRC_ERR_EID may be sent
           - Error event #FM_GET_DIR_FILE_TGT_ERR_EID may be sent
           - Error event #FM_GET_DIR_FILE_WARNING_EID may be sent
           - Error event #FM_GET_DIR_FILE_OS_ERR_EID may be sent

      \par Criticality
           Reading a directory that contains thousands of files may consume more CPU
           resource than anticipated.

      \sa #FM_GET_DIR_PKT_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="14" />
        </ConstraintSet>
        <EntryList>
          <Entry type="GetDirectoryToFile_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="GetDirListPktCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Get Directory Listing to a Packet

          \par Description
               This command creates a telemetry packet #FM_DirListPkt_t that
               contains a listing of the entries in the specified directory.
               Since the packet will likely hold fewer entries than will be
               possible in a directory, the command also provides an index
               argument to define which entry in the directory is the first
               entry reported in the telemetry packet.
               After reading the directory list and skipping entries until
               reaching the index of the first entry reported, the remaining
               entries in the packet are filled sequentially until either
               the packet is full or until there are no more entries in the
               directory.
               The first entry index is zero based - thus, when the first
               entry index is zero the first directory entry will be the
               first packet entry.
               The number of entries per packet #FM_DIR_LIST_PKT_ENTRIES
               is a platform configuration definition.
               Because of the possibility that this command might take a very long time
               to complete, command argument validation will be done immediately but
               reading the directory will be performed by a lower priority child task.
               As such, the return value for this function only refers to the result
               of command argument verification and being able to place the command on
               the child task interface queue.

          \fmcmdmnemonic \FM_GetDirPkt

          \par Command Packet Structure
               #FM_GetDirPktCmd_t

          \par Command Verification
               Successful execution of this command may be verified with
               the following telemetry:
               - Command success counter /FM_CMDPC will increment after validation
               - Child cmd success counter /FM_ChildCMDPC will increment after completion
               - The #FM_DirListPkt_t telemetry packet will be sent
               - The #FM_GET_DIR_PKT_CMD_EID debug event will be sent

          \par Error Conditions
               This command may fail for the following reason(s):
               - OS error received opening directory
               - OS error received requesting directory size
               - OS error received closing directory
               - Invalid directory pathname received
               - Command packet length not as expected

          \par Evidence of failure may be found in the following telemetry:
               - Command error counter /FM_CMDEC may increment
               - Child cmd error counter /FM_ChildCMDEC may increment
               - Error event #FM_GET_DIR_PKT_PKT_ERR_EID may be sent
               - Error event #FM_GET_DIR_PKT_SRC_ERR_EID may be sent
               - Error event #FM_GET_DIR_PKT_CHILD_ERR_EID may be sent
               - Error event #FM_GET_DIR_PKT_OS_ERR_EID may be sent

          \par Criticality
               Reading a directory that contains thousands of files may consume more CPU
               resource than anticipated.

          \sa #FM_GET_DIR_FILE_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="15" />
        </ConstraintSet>
        <EntryList>
          <Entry type="GetDirectoryToPkt_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="MonitorFilesystemSpaceCmd" baseType="CMD">
        <LongDescription>
           \brief Monitor Filesystem Space

            \par Description
                 This command queries the specified location for each of the
                 enabled entries in the file system monitor table.  The data
                 is then placed in a telemetry packet and sent to ground.

            \par Command Packet Structure
                 #FM_MonitorFilesystemSpaceCmd_t

            \par Evidence of success may be found in the following telemetry:
                 - #FM_HousekeepingPkt_t.CommandCounter will increment
                 - Debug event #FM_MONITOR_FILESYSTEM_SPACE_CMD_EID will be sent
                 - Telemetry packet #FM_MonitorReportPkt_t will be sent

            \par Error Conditions
                 - Invalid command packet length
                 - Free space table is not loaded

            \par Evidence of failure may be found in the following telemetry:
                 - #FM_HousekeepingPkt_t.CommandErrCounter will increment
                 - Error event #FM_GET_FREE_SPACE_PKT_ERR_EID may be sent
                 - Error event #FM_GET_FREE_SPACE_TBL_ERR_EID may be sent

            \par Criticality
                 - There are no critical issues related to this command.
        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="16" />
        </ConstraintSet>
      </ContainerDataType>

      <ContainerDataType name="SetTableStateCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Set Free Space Table Entry State

          \par Description
               This command enables or disables a single entry in the FM
               file system free space table.  Only table entries that are
               currently enabled or disabled may be modified by command.
               Unused table entries cannot be modified.

          \fmcmdmnemonic \FM_SetTableState

          \par Command Packet Structure
               #FM_SetTableStateCmd_t

          \par Evidence of success may be found in the following telemetry:
               - Command success counter /FM_CMDPC will increment
               - Informational event #FM_SET_TABLE_STATE_CMD_EID will be sent

          \par Error Conditions
               - Invalid command packet length
               - FM file system free space table has not yet been loaded
               - Invalid command argument, table entry index arg is out of range
               - Invalid command argument, entry state arg is not enable/disable
               - Invalid current table entry state, entry is unused

          \par Evidence of failure may be found in the following telemetry:
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_SET_TABLE_STATE_PKT_ERR_EID may be sent
               - Error event #FM_SET_TABLE_STATE_TBL_ERR_EID may be sent
               - Error event #FM_SET_TABLE_STATE_ARG_ERR_EID may be sent
               - Error event #FM_SET_TABLE_STATE_UNUSED_ERR_EID may be sent

          \par Criticality
               - There are no critical issues related to this command.

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="17" />
        </ConstraintSet>
        <EntryList>
          <Entry type="TableIndexAndState_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DeleteFileInternalCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Delete File (internal)

          \par Description
               This is a special version of the #FM_DELETE_CC command for
               use when the command is sent by another application, rather
               than from the ground.  This version of the command will not
               generate a success event, nor will the command increment the
               command success counter.  The intent is to avoid confusion
               resulting from telemetry representing the results of delete
               commands sent by other applications and those sent from the
               ground.  Refer to #FM_DELETE_CC command for use details.

          \sa #FM_DELETE_CC

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="18" />
        </ConstraintSet>
        <EntryList>
          <Entry type="SingleFilename_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="SetPermissionsCmd" baseType="CMD">
        <LongDescription>
         \fmcmd Set Permissions of a file

          \par Description
               This command sets the permissions for a file. This is a direct interface
               to OS_chmod in the OSAL. OS_chmod accepts a uint32 to set the file's mode.
               The mode value also contains the type of file (regular or directory, etc) so
               care should be taken to not change the file type from regular to directory or vice-versa.
               Examples for a regular file:

               0100700 (Decimal: 33216) - Read, Write and Execute
               0100600 (Decimal: 33152) - Read, and Write
               0100400 (Decimal: 33024) - Read Only
         *
         *       Examples for a directory:
               0040700 (Decimal: 16832) - Read, Write and Execute
               0040600 (Decimal: 16786) - Read, and Write
               0040400 (Decimal: 16640) - Read Only
         *
               S_IFMT     0170000   bit mask for the file type bit field

                 S_IFSOCK   0140000   socket
                 S_IFLNK    0120000   symbolic link
                 S_IFREG    0100000   regular file
                 S_IFBLK    0060000   block device
                 S_IFDIR    0040000   directory
                 S_IFCHR    0020000   character device
                 S_IFIFO    0010000   FIFO
          \fmcmdmnemonic \FM_SetFilePerm

          \par Command Packet Structure
               #FM_SetPermCmd_t

          \par Error Conditions
               - Invalid command packet length
               - Error from call to OS_chmod

          \par Evidence of failure may be found in the following telemetry:
               - Command error counter /FM_CMDEC will increment
               - Error event #FM_SET_PERM_ERR_EID may be sent
               - Error event #FM_SET_PERM_CMD_EID may be sent
               - Error event #FM_SET_PERM_OS_ERR_EID may be sent

          \par Criticality
               - There are no critical issues related to this command.

        </LongDescription>
        <ConstraintSet>
          <ValueConstraint entry="Sec.FunctionCode" value="19" />
        </ConstraintSet>
        <EntryList>
          <Entry type="FilenameAndMode_Payload" name="Payload" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="MonitorTableEntry" shortDescription="Monitor table entry" >
        <EntryList>
          <Entry name="Type"  type="MonitorTableEntry_Type" shortDescription="Table entry type" />
          <Entry name="Enabled"  type="MonitorTableEntry_Enable" shortDescription="Boolean flag indicating whether this entry is active or not" />
          <Entry name="Name" type="BASE_TYPES/PathName"  shortDescription="Location to monitor">
            <LongDescription>
              The interpretation of this string depends on Type
              See description of the FM_MonitorTableEntry_Type_t for how this is to be set
            </LongDescription>
          </Entry>
        </EntryList>
      </ContainerDataType>

      <ArrayDataType name="FileSys" dataTypeRef="MonitorTableEntry">
        <DimensionList>
           <Dimension size="${FM/TABLE_ENTRY_COUNT}"/>
        </DimensionList>
      </ArrayDataType>

      <ContainerDataType name="MonitorTable" shortDescription="Monitor table definition" >
        <EntryList>
           <Entry name="Entries"  type="FileSys" shortDescription="One entry for each file system" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="DirListFileStats" shortDescription="Get dir list to file statistics structure" >
        <EntryList>
          <Entry name="DirName" type="BASE_TYPES/PathName" shortDescription="File system name" />
          <Entry name="DirEntries" type="BASE_TYPES/uint32"   shortDescription="Number of entries in the directory" />
          <Entry name="FileEntries" type="BASE_TYPES/uint32"   shortDescription="Number of entries in file" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="ChildQueueEntry_Payload" shortDescription="Child task command queue" >
        <EntryList>
          <Entry name="CommandCode" type="CFE_HDR/FunctionCode" shortDescription="Command code - identifies the command" />
          <Entry name="DirListOffset" type="BASE_TYPES/uint32" shortDescription="Starting entry for dir list commands" />
          <Entry name="FileInfoState" type="BASE_TYPES/uint32" shortDescription="File info state" />
          <Entry name="FileInfoSize" type="BASE_TYPES/uint32" shortDescription="File info size" />
          <Entry name="FileInfoTime" type="BASE_TYPES/uint32" shortDescription="File info time" />
          <Entry name="FileInfoCRC" type="BASE_TYPES/uint32"   shortDescription="File info CRC method" />
          <Entry name="Source1" type="BASE_TYPES/PathName" shortDescription="First source file or directory name command argument" />
          <Entry name="Source2" type="BASE_TYPES/PathName" shortDescription="Second source filename command argument" />
          <Entry name="Target" type="BASE_TYPES/PathName" shortDescription="Target filename command argument" />
          <Entry name="GetSizeTimeMode" type="BASE_TYPES/uint8"   shortDescription="Whether to invoke stat call for size and time (CPU intensive)" />
          <Entry name="Mode" type="BASE_TYPES/uint32" shortDescription="Mode of the file (Permissions)" />
        </EntryList>
      </ContainerDataType>

      <ContainerDataType name="SendHkCmd" baseType="CFE_HDR/CommandHeader" shortDescription="Send Housekeeping command" />

     </DataTypeSet>

    <ComponentSet>
      <Component name="Application">
        <RequiredInterfaceSet>
          <Interface name="CMD" shortDescription="Software bus telecommand interface" type="CFE_SB/Telecommand">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelecommandDataType" type="CMD" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="SEND_HK" shortDescription="Send telemetry command interface" type="CFE_SB/Telecommand">
            <!-- This uses a bare spacepacket with no payload -->
            <GenericTypeMapSet>
              <GenericTypeMap name="TelecommandDataType" type="SendHkCmd" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="HK_TLM" shortDescription="Software bus housekeeping telemetry interface" type="CFE_SB/Telemetry">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelemetryDataType" type="HousekeepingPkt" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="FILE_INFO_TLM" shortDescription="Software bus housekeeping telemetry interface" type="CFE_SB/Telemetry">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelemetryDataType" type="FileInfoPkt" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="DIR_LIST_TLM" shortDescription="Software bus housekeeping telemetry interface" type="CFE_SB/Telemetry">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelemetryDataType" type="DirListPkt" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="OPEN_FILES_TLM" shortDescription="Software bus housekeeping telemetry interface" type="CFE_SB/Telemetry">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelemetryDataType" type="OpenFilesPkt" />
            </GenericTypeMapSet>
          </Interface>
          <Interface name="MONITOR_TLM" shortDescription="Software bus housekeeping telemetry interface" type="CFE_SB/Telemetry">
            <GenericTypeMapSet>
              <GenericTypeMap name="TelemetryDataType" type="MonitorReportPkt" />
            </GenericTypeMapSet>
          </Interface>
        </RequiredInterfaceSet>
        <Implementation>
          <VariableSet>
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="CmdTopicId" initialValue="${CFE_MISSION/FM_CMD_TOPICID}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="SendHkTopicId" initialValue="${CFE_MISSION/FM_SEND_HK_TOPICID}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="HkTlmTopicId" initialValue="${CFE_MISSION/FM_HK_TLM_TOPICID}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="FileInfoTlmTopicId" initialValue="${CFE_MISSION/FM_FILE_INFO_TLM_TOPICID}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="DirListTlmTopicId" initialValue="${CFE_MISSION/FM_DIR_LIST_TLM_TOPICID)}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="OpenFilesTlmTopicId" initialValue="${CFE_MISSION/FM_OPEN_FILES_TLM_TOPICID}" />
            <Variable type="BASE_TYPES/uint16" readOnly="true" name="MonitorTlmTopicId" initialValue="${CFE_MISSION/FM_MONITOR_TLM_TOPICID}" />
          </VariableSet>
          <!-- Assign fixed numbers to the "TopicId" parameter of each interface -->
          <ParameterMapSet>
            <ParameterMap interface="CMD" parameter="TopicId" variableRef="CmdTopicId" />
            <ParameterMap interface="SEND_HK" parameter="TopicId" variableRef="SendHkTopicId" />
            <ParameterMap interface="HK_TLM" parameter="TopicId" variableRef="HkTlmTopicId" />
            <ParameterMap interface="FILE_INFO_TLM" parameter="TopicId" variableRef="FileInfoTlmTopicId" />
            <ParameterMap interface="DIR_LIST_TLM" parameter="TopicId" variableRef="DirListTlmTopicId" />
            <ParameterMap interface="OPEN_FILES_TLM" parameter="TopicId" variableRef="OpenFilesTlmTopicId" />
            <ParameterMap interface="MONITOR_TLM" parameter="TopicId" variableRef="MonitorTlmTopicId" />
          </ParameterMapSet>
        </Implementation>
      </Component>
    </ComponentSet>


  </Package>
</PackageFile>
